# -*- coding: utf-8 -*-
"""bismillah students.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GKXCJub1qcgoMFZEhsSOcqYeFvcOTm23

**Proyek Akhir: Menyelesaikan Permasalahan Perusahaan Edutech**

* Nama: Diajeng Mahai Sukma
* Email: diajengmahai@gmail.com
* Id Dicoding: sukmaa

**Persiapan**

Menyiapkan library yang dibutuhkan
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score
from sklearn.preprocessing import StandardScaler
import joblib
from sklearn.model_selection import GridSearchCV

df = pd.read_csv('data.csv', delimiter=';')

"""**Data Understanding**

Penjelasan fitur yang terdapat pada dataset sebagai berikut :
"""

# Melihat 5 data teratas
df.head(5)

# Melihat informasi dari setiap fitur
df.info()

#Mwnghitung jumlah kolom numerikal
num_cols = df.select_dtypes(include=['int64','float64']).columns
num_count = len(num_cols)

#Menghitung jumlah kolom kategorikal
cat_col = df.select_dtypes(include=['object','category']).columns
cat_count = len(cat_col)

print(f"Jumlah kolom numerikal: {num_count}")
print(f"Jumlah kolom kategorikal: {cat_count}")

print(num_cols)

cat_col

# Melihat bentuk data
df.shape

# Melihat statistik deskriptif data
df.describe()

# melihat missing value pada data
df.isna().sum()

# melihat data duplikat
df.duplicated().sum()

"""tidak ada data duplikat

**Analysis Univariate Variable**
"""

# Univariate analysis untuk numerical variables
plt.figure(figsize=(15, 20))
for i, col in enumerate(num_cols, 1):
    plt.subplot(len(num_cols) // 3 + 1, 3, i)
    sns.histplot(df[col], kde=True)
    plt.title(f'Distribution of {col}')
plt.tight_layout()
plt.show()

"""
dari grafik di atas dapat dilihat persebaran data untuk tiap feature"""

# Univariate analysis untuk categorical variables
plt.figure(figsize=(15, 5))
for i, col in enumerate(cat_col, 1):
    plt.subplot(len(cat_col) // 3 + 1, 3, i)
    sns.countplot(data=df, x=col)
    plt.title(f'Distribution of {col}')
    plt.xticks()
plt.tight_layout()
plt.show()

"""**Multivariate Analysis**"""

df_multi =pd.DataFrame(df.copy())
df_multi.head()

status_drop = df_multi[df_multi['Status'] == 'Dropout']
status_drop.head()

"""Status Dropout dan Fitur Kategorikal Numerikal"""

#Martial Status pada siswa Dropout
martial_status = status_drop['Marital_status'].value_counts()
marital_status_percent = status_drop['Marital_status'].value_counts(normalize=True) * 100

plt.figure(figsize=(8, 6))
martial_status.plot(kind='bar', color='skyblue')
plt.title('Distribusi Marital Status Pada Siswa Dropout')
plt.xlabel('Martial Status')
plt.ylabel('Jumlah')
plt.show()

plt.figure(figsize=(8, 8))
wedges, texts, autotexts = plt.pie(
    marital_status_percent,
    labels=None,  # Labels akan ditampilkan di legend
    autopct='%1.1f%%',
    startangle=90,
    colors=sns.color_palette('viridis', len(marital_status_percent))
)
# Menambahkan judul dan label
plt.title('Distribution of Marital Status (Percentage)')
plt.legend(wedges, marital_status_percent.index, title="Marital Status", loc="center left", bbox_to_anchor=(1, 0, 0.5, 1))
plt.xlabel('Marital Status')
plt.ylabel('Percentage (%)')
plt.xticks(rotation=45)
plt.show()

# Helper function untuk mengganti nilai numerik dengan label deskriptif
def replace_values(column, replacement_dict):
    return df_multi[column].replace(replacement_dict)

# Daftar kolom yang memerlukan konversi dan dictionary untuk mengganti nilainya
replacement_mappings = {
    'Marital_status': {
        1: 'Single',
        2: 'Married',
        3: 'Widower',
        4: 'Divorced',
        5: 'Facto Union',
        6: 'Legally Separated'
    },
    'Course': {
        33: 'Biofuel Production Technologies',
        171: 'Animation and Multimedia Design',
        8014: 'Social Service (evening attendance)',
        9003: 'Agronomy',
        9070: 'Communication Design',
        9085: 'Veterinary Nursing',
        9119: 'Informatics Engineering',
        9130: 'Equinculture',
        9147: 'Management',
        9238: 'Social Service',
        9254: 'Tourism',
        9500: 'Nursing',
        9556: 'Oral Hygiene',
        9670: 'Advertising and Marketing Management',
        9773: 'Journalism and Communication',
        9853: 'Basic Education',
        9991: 'Management (evening attendance)'
    },
    'Nacionality': {
        1: 'Portuguese', 2: 'German', 6: 'Spanish', 11: 'Italian', 13: 'Dutch',
        14: 'English', 17: 'Lithuanian', 21: 'Angolan', 22: 'Cape Verdean',
        24: 'Guinean', 25: 'Mozambican', 26: 'Santomean', 32: 'Turkish',
        41: 'Brazilian', 62: 'Romanian', 100: 'Moldova (Republic of)',
        101: 'Mexican', 103: 'Ukrainian', 105: 'Russian', 108: 'Cuban',
        109: 'Colombian'
    },
    'Mothers_qualification': {
        1: 'Secondary Education - 12th Year of Schooling or Eq.',
        2: 'Higher Education - Bachelor\'s Degree',
        3: 'Higher Education - Degree',
        4: 'Higher Education - Master\'s',
        5: 'Higher Education - Doctorate',
        6: 'Frequency of Higher Education',
        9: '12th Year of Schooling - Not Completed',
        10: '11th Year of Schooling - Not Completed',
        11: '7th Year (Old)',
        12: 'Other - 11th Year of Schooling',
        14: '10th Year of Schooling',
        18: 'General commerce course',
        19: 'Basic Education 3rd Cycle (9th/10th/11th Year) or Equiv.',
        22: 'Technical-professional course',
        26: '7th year of schooling',
        27: '2nd cycle of the general high school course',
        29: '9th Year of Schooling - Not Completed',
        30: '8th year of schooling',
        34: 'Unknown',
        35: 'Can\'t read or write',
        36: 'Can read without having a 4th year of schooling',
        37: 'Basic education 1st cycle (4th/5th year) or equiv.',
        38: 'Basic Education 2nd Cycle (6th/7th/8th Year) or Equiv.',
        39: 'Technological specialization course',
        40: 'Higher education - degree (1st cycle)',
        41: 'Specialized higher studies course',
        42: 'Professional higher technical course',
        43: 'Higher Education - Master (2nd cycle)',
        44: 'Higher Education - Doctorate (3rd cycle)'
    },
    'Mothers_occupation': {
        0: 'Student', 1: 'Legislative Power and Executive Bodies',
        2: 'Specialists in Intellectual and Scientific Activities',
        3: 'Intermediate Level Technicians and Professions',
        4: 'Administrative staff',
        5: 'Personal Services, Security and Safety Workers and Sellers',
        6: 'Farmers and Skilled Workers in Agriculture, Fisheries and Forestry',
        7: 'Skilled Workers in Industry, Construction and Craftsmen',
        8: 'Installation and Machine Operators and Assembly Workers',
        9: 'Unskilled Workers',
        10: 'Armed Forces Professions',
        90: 'Other Situation',
        99: '(blank)',
        122: 'Health professionals',
        123: 'Teachers',
        125: 'Specialists in ICT',
        131: 'Intermediate level science and engineering technicians',
        132: 'Intermediate level technicians of health',
        134: 'Intermediate level technicians from legal, social, sports, cultural and similar services',
        141: 'Office workers, secretaries and data processing operators',
        143: 'Data, accounting, statistical, financial services and registry-related operators',
        144: 'Other administrative support staff',
        151: 'Personal service workers',
        152: 'Sellers',
        153: 'Personal care workers and the like',
        171: 'Skilled construction workers, except electricians',
        173: 'Skilled workers in printing, precision instrument manufacturing, jewelers, artisans',
        175: 'Workers in food processing, woodworking, clothing and other industries',
        191: 'Cleaning workers',
        192: 'Unskilled workers in agriculture, animal production, fisheries and forestry',
        193: 'Unskilled workers in extractive industry, construction, manufacturing and transport',
        194: 'Meal preparation assistants'
    },
    'Fathers_qualification': {
        1: 'Secondary Education - 12th Year of Schooling or Eq.',
        2: 'Higher Education - Bachelor\'s Degree',
        3: 'Higher Education - Degree',
        4: 'Higher Education - Master\'s',
        5: 'Higher Education - Doctorate',
        6: 'Frequency of Higher Education',
        9: '12th Year of Schooling - Not Completed',
        10: '11th Year of Schooling - Not Completed',
        11: '7th Year (Old)',
        12: 'Other - 11th Year of Schooling',
        13: '2nd year complementary high school course',
        14: '10th Year of Schooling',
        18: 'General commerce course',
        19: 'Basic Education 3rd Cycle (9th/10th/11th Year) or Equiv.',
        20: 'Complementary High School Course',
        22: 'Technical-professional course',
        25: 'Complementary High School Course - not concluded',
        26: '7th year of schooling',
        27: '2nd cycle of the general high school course',
        29: '9th Year of Schooling - Not Completed',
        30: '8th year of schooling',
        31: 'General Course of Administration and Commerce',
        33: 'Supplementary Accounting and Administration',
        34: 'Unknown',
        35: 'Can\'t read or write',
        36: 'Can read without having a 4th year of schooling',
        37: 'Basic education 1st cycle (4th/5th year) or equiv.',
        38: 'Basic Education 2nd Cycle (6th/7th/8th Year) or Equiv.',
        39: 'Technological specialization course',
        40: 'Higher education - degree (1st cycle)',
        41: 'Specialized higher studies course',
        42: 'Professional higher technical course',
        43: 'Higher Education - Master (2nd cycle)',
        44: 'Higher Education - Doctorate (3rd cycle)'
    },
    'Fathers_occupation': {
        0: 'Student',
        1: 'Legislative Power and Executive Bodies',
        2: 'Specialists in Intellectual and Scientific Activities',
        3: 'Intermediate Level Technicians and Professions',
        4: 'Administrative staff',
        5: 'Personal Services, Security and Safety Workers and Sellers',
        6: 'Farmers and Skilled Workers in Agriculture, Fisheries and Forestry',
        7: 'Skilled Workers in Industry, Construction and Craftsmen',
        8: 'Installation and Machine Operators and Assembly Workers',
        9: 'Unskilled Workers',
        10: 'Armed Forces Professions',
        90: 'Other Situation',
        99: '(blank)',
        101: 'Armed Forces Officers',
        102: 'Armed Forces Sergeants',
        103: 'Other Armed Forces personnel',
        112: 'Directors of administrative and commercial services',
        114: 'Hotel, catering, trade and other services directors',
        121: 'Specialists in the physical sciences, mathematics, engineering and related techniques',
        122: 'Health professionals',
        123: 'Teachers',
        124: 'Specialists in finance, accounting, administrative organization, public and commercial relations',
        131: 'Intermediate level science and engineering technicians and professions',
        132: 'Intermediate level technicians of health',
        134: 'Intermediate level technicians from legal, social, sports, cultural and similar services',
        135: 'Information and communication technology technicians',
        141: 'Office workers, secretaries in general and data processing operators',
        143: 'Data, accounting, statistical, financial services and registry-related operators',
        144: 'Other administrative support staff',
        151: 'Personal service workers',
        152: 'Sellers',
        153: 'Personal care workers and the like',
        154: 'Protection and security services personnel',
        161: 'Market-oriented farmers and skilled agricultural and animal production workers',
        163: 'Farmers, livestock keepers, fishermen, hunters and gatherers, subsistence',
        171: 'Skilled construction workers and the like, except electricians',
        172: 'Skilled workers in metallurgy, metalworking and similar',
        174: 'Skilled workers in electricity and electronics',
        175: 'Workers in food processing, woodworking, clothing and other industries and crafts',
        181: 'Fixed plant and machine operators',
        182: 'Assembly workers',
        183: 'Vehicle drivers and mobile equipment operators',
        192: 'Unskilled workers in agriculture, animal production, fisheries and forestry',
        193: 'Unskilled workers in extractive industry, construction, manufacturing and transport',
        194: 'Meal preparation assistants',
        195: 'Street vendors (except food) and street service providers'
    },
    'Gender': {
        1: 'Male',
        0: 'Female'
    }
    # ,
    # 'Scholarship_holder': {
    #     1: 'Yes',
    #     0: 'No'
    # },
    # 'International': {
    #     1: 'Yes',
    #     0: 'No'
    # }
}

# Terapkan fungsi replace_values pada kolom-kolom yang relevan
for col, mapping in replacement_mappings.items():
    df_multi[col] = replace_values(col, mapping)

columns_ketegorikal = ['Marital_status', 'Course', 'Nacionality', 'Mothers_qualification',
                       'Fathers_qualification', 'Mothers_occupation', 'Fathers_occupation',
                       'Gender']
# 'Scholarship_holder', 'International'

def plot_bar_distribution(data, columns, color='blue', figsize=(4, 3)):
    for column in columns:
        value_counts = data[column].value_counts()
        plt.figure(figsize=figsize)
        value_counts.plot(kind='bar', color=color)
        plt.title(f'Distribusi {column} Status Pada Siswa Dropout')
        plt.xlabel(column)
        plt.ylabel('Jumlah')
        plt.show()

# Contoh penggunaan
plot_bar_distribution(status_drop, columns_ketegorikal)

"""Status Dropout dengan Fitur Kategorical (Yes or No)"""

col_kategorikal = ['Displaced','Educational_special_needs','Debtor',
                   'Tuition_fees_up_to_date','Scholarship_holder','International']

def create_value_counts_table(data, columns):
    result_df = pd.DataFrame()  # DataFrame kosong untuk menyimpan hasil

    for column in columns:
        # Menghitung value_counts untuk setiap kolom
        value_counts_df = data[column].value_counts().to_frame(name=f'Jumlah_{column}')
        value_counts_df[column] = value_counts_df.index  # Menyimpan nilai-nilai unik
        value_counts_df.reset_index(drop=True, inplace=True)  # Mereset index
        # Menggabungkan hasil ke DataFrame hasil (result_df)
        result_df = pd.concat([result_df, value_counts_df], axis=1)

    return result_df

# Contoh penggunaan
value_counts_table = create_value_counts_table(status_drop, col_kategorikal)
value_counts_table

import matplotlib.pyplot as plt

def plot_pie_distribution(data, columns, figsize=(8, 6), autopct='%1.1f%%', colors=None):
    for column in columns:
        value_counts = data[column].value_counts()
        plt.figure(figsize=figsize)
        plt.pie(value_counts, labels=value_counts.index, autopct=autopct, colors=colors, startangle=90)
        plt.title(f'Presentase Jumlah Siswa Dropout Terhadap {column}')
        plt.axis('equal')  # Agar pie chart menjadi lingkaran
        plt.show()

# Contoh penggunaan
plot_pie_distribution(status_drop,col_kategorikal)

"""Correlation Matrix"""

# One-hot encoding untuk fitur kategorikal
df_encoded = pd.get_dummies(df, columns=cat_col, drop_first=False)

# Membuat matriks korelasi untuk seluruh fitur (numerik dan kategorikal yang telah dienkode)
correlation_matrix = df_encoded.corr()

# Plot matriks korelasi
plt.figure(figsize=(40, 30))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Matrix of All Variables (Including Encoded Categorical Features)')
plt.show()

# menampilkan 10 feature yang paling berkorelasi

# Mengubah kolom target 'Status' menjadi numerik
status_mapping = {'Dropout': 0,'Enrolled':1,'Graduate': 2}
df_mapping = df.copy()
df_mapping['Status'] = df['Status'].replace(status_mapping)

# Identifikasi fitur numerik dan kategorikal
categorical_columns = df.select_dtypes(include=['object']).columns.tolist()
numerical_columns = df.select_dtypes(include=['int64', 'float64']).columns.tolist()

# One-hot encoding untuk fitur kategorikal (kecuali kolom target 'Status')
df_encoded = pd.get_dummies(df_mapping, columns=[col for col in categorical_columns if col != 'Status'], drop_first=True)

# Membuat matriks korelasi untuk seluruh fitur (numerik dan kategorikal yang telah dienkode)
correlation_matrix = df_encoded.corr()

# Ambil korelasi dengan kolom 'Status'
status_correlation = correlation_matrix["Status"].sort_values(ascending=False)

factors = status_correlation
factors = factors.drop('Status')

print("Factors correlated with Status:")
print(factors)

# Plot the top 10 correlations
plt.figure(figsize=(10, 8))
sns.barplot(x=factors.values[:10], y=factors.index[:10], dodge=False, palette="coolwarm")
plt.title("Features Most Correlated with Status")
plt.xlabel("Correlation with Status")
plt.show()

"""**Data Preparation / Preprocessing**"""

# Identifikasi fitur numerik dan kategorikal
categorical_columns = df.select_dtypes(include=['object']).columns.tolist()
numerical_columns = df.select_dtypes(include=['int64', 'float64']).columns.tolist()

"""**Standarisasi Fitur Numerik**"""

df_scaler = df[['Curricular_units_2nd_sem_approved', 'Curricular_units_2nd_sem_grade', 'Curricular_units_1st_sem_approved', 'Curricular_units_1st_sem_grade', 'Tuition_fees_up_to_date', 'Scholarship_holder', 'Curricular_units_2nd_sem_enrolled', 'Curricular_units_1st_sem_enrolled', 'Admission_grade', 'Displaced']]

# Standardisasi fitur numerik
scaler = StandardScaler()
df_scaler = scaler.fit_transform(df_scaler)

import os

# Membuat folder 'model' jika belum ada
os.makedirs('model', exist_ok=True)

# Simpan scaler
joblib.dump(scaler, 'model/scaler.pkl')

"""One-hot Encoding"""

# Assuming you want to preprocess the original 'df' DataFrame
df_clean = df.copy()  # Create a copy of the original DataFrame
# One-hot encoding untuk fitur kategorikal
df_clean = pd.get_dummies(df_clean, columns=categorical_columns, drop_first=False)

"""**Train Test Split**

Memisahkan kolom fitur dan kolom target kemudian membagi menjadi data train dan test dengan rasio 8:2.

Memilih 10 kolom yang memiliki korelasi tertinggi dengan kolom target yaitu 'Curricular_units_2nd_sem_approved', 'Curricular_units_2nd_sem_grade', 'Curricular_units_1st_sem_approved', 'Curricular_units_1st_sem_grade', 'Tuition_fees_up_to_date', 'Scholarship_holder', 'Curricular_units_2nd_sem_enrolled', 'Curricular_units_1st_sem_enrolled', 'Admission_grade', 'Displaced'.

Hal tersebut dilakukan agar komputasi menjadi lebih optimal dan pembuatan prototype tidak perlu terlalu banyak input fitur.
"""

# Memisahkan fitur (X) dan target (y)
X = df_clean.drop(['Status_Dropout','Status_Enrolled','Status_Graduate'], axis=1)
X = X[['Curricular_units_2nd_sem_approved', 'Curricular_units_2nd_sem_grade', 'Curricular_units_1st_sem_approved', 'Curricular_units_1st_sem_grade', 'Tuition_fees_up_to_date', 'Scholarship_holder', 'Curricular_units_2nd_sem_enrolled', 'Curricular_units_1st_sem_enrolled', 'Admission_grade', 'Displaced']]
y = df_clean[['Status_Dropout','Status_Enrolled','Status_Graduate']]

# Membagi data menjadi training dan testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""**Modeling**

**GridsearchCV**

Menggunakan gridsearchCV untuk mencari kombinasi hyperparameter terbaik.
"""

rdf_model = RandomForestClassifier(random_state=123)

# Parameter grid
param_grid = {
    'n_estimators': [200, 500],
    'max_features': ['sqrt', 'log2'],
    'max_depth' : [15 ,20],
    'criterion' :['gini', 'entropy']
}

CV_rdf = GridSearchCV(estimator=rdf_model, param_grid=param_grid, cv=5, n_jobs=-1)
CV_rdf.fit(X_train, y_train)

# Menampilkan best parameter
print("best parameters: ", CV_rdf.best_params_)

"""**Random forest**"""

rf_model = RandomForestClassifier(
    criterion='entropy',
    max_depth=15,
    random_state=123,
    max_features='sqrt',
    n_estimators=500,
    n_jobs=-1
)
rf_model.fit(X_train, y_train)

# Menyimpan model
joblib.dump(rf_model, "model/rf_model.joblib")

"""**Desesion Tree**"""

from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import GridSearchCV

tree_model = DecisionTreeClassifier(random_state=123)

param_grid = {
    'max_features': ['auto', 'sqrt', 'log2'],
    'max_depth' : [5, 6, 7, 8],
    'criterion' :['gini', 'entropy']
}

CV_tree = GridSearchCV(estimator=tree_model, param_grid=param_grid, cv=5, n_jobs=-1)
CV_tree.fit(X_train, y_train)

print("best parameters: ", CV_tree.best_params_)

dtree_model = DecisionTreeClassifier(
    random_state=123,
    criterion='gini',
    max_depth=7,
    max_features='sqrt'
)

tree_model.fit(X_train, y_train)
joblib.dump(dtree_model, "model/dtree_model.joblib")

"""**GradienBoosting**"""

# Jika y_train di-one-hot encoding
y_train_1d = np.argmax(y_train, axis=1)

y_train_1d

from sklearn.ensemble import GradientBoostingClassifier

gboost_model = GradientBoostingClassifier(random_state=123)

param_grid = {
    'max_depth': [5, 8],
    'n_estimators': [200, 300],
    'learning_rate': [0.01, 0.1],
    'max_features': ['auto', 'sqrt', 'log2']
}

CV_gboost = GridSearchCV(estimator=gboost_model, param_grid=param_grid, cv=5, n_jobs=-1)
CV_gboost.fit(X_train, y_train_1d)

# memperoleh hyperparameter terbaik dengan menjalankan kode berikut.
print("best parameters: ", CV_gboost.best_params_)

# model gradient boosting menggunakan hyperparameter
gboost_model = GradientBoostingClassifier(
    random_state=123,
    learning_rate=0.01,
    max_depth=5,
    max_features='sqrt',
    n_estimators=300
)
gboost_model.fit(X_train, y_train_1d)
joblib.dump(gboost_model, "model/gboost_model.joblib")

"""**Evaluation**

Prediksi dan Evaluasi Decision Tree
"""

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
# Prediksi menggunakan Desesion Tree
y_pred_dt = tree_model.predict(X_test)

# Evaluasi Random Forest
print("Random Forest Evaluation:")
acc = accuracy_score(y_test, y_pred_dt) * 100
report = classification_report(y_test, y_pred_dt)
print(f"Accuracy: ", acc)
print(report)

"""Prediksi dan Evaluasi Random Forest"""

# Prediksi menggunakan Random Forest
y_pred_rf = rf_model.predict(X_test)

# Evaluasi Random Forest
print("Random Forest Evaluation:")
acc = accuracy_score(y_test, y_pred_rf) * 100
report = classification_report(y_test, y_pred_rf)
print(f"Accuracy: ", acc)
print(report)

"""Prediksi dan Evaluasi GradienBoosting"""

# Konversi y_test dari one-hot encoding ke label 1D
y_test_1d = np.argmax(y_test, axis=1)

# Prediksi menggunakan Gradient Boosting (atau model lain)
y_pred_gb = gboost_model.predict(X_test)

# Evaluasi dengan accuracy dan classification report
print("Gradient Boosting Evaluation:")
acc = accuracy_score(y_test_1d, y_pred_gb) * 100
report = classification_report(y_test_1d, y_pred_gb)
print(f"Accuracy: {acc:.2f}%")
print(report)

!zip -r model.zip model

